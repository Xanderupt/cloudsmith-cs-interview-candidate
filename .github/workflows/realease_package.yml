name: Publish Python Package

on:
  workflow_run:
    workflows: ["Build Python Package"]
    types:
      - completed
    branches:
      - master

env:
  CLOUDSMITH_NAMESPACE: ${{ vars.CLOUDSMITH_NAMESPACE }}
  CLOUDSMITH_REPOSITORY: "staging"
  CLOUDSMITH_SERVICE_SLUG: ${{ vars.CLOUDSMITH_SERVICE_SLUG }}
  CLOUDSMITH_ACCOUNT: 'your-cloudsmith-account'  # Replace with your Cloudsmith account

permissions:
  id-token: write
  contents: read

jobs:
  publish:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Request OIDC Token
        id: oidc-token
        run: |
          echo "Requesting OIDC token..."
          OIDC_TOKEN=$(curl -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" | jq -r '.value')
          echo "::add-mask::$OIDC_TOKEN"
          echo "::set-output name=oidc-token::$OIDC_TOKEN"

      - name: Request JWT Token from Cloudsmith
        id: jwt-token
        run: |
          echo "Requesting JWT token from Cloudsmith..."
          JWT_RESPONSE=$(curl -X POST "https://api.cloudsmith.io/openid/${{ env.CLOUDSMITH_ACCOUNT }}/" \
            -H "Content-Type: application/json" \
            -d '{"oidc_token": "${{ steps.oidc-token.outputs.oidc-token }}", "service_slug": "${{ env.CLOUDSMITH_SERVICE_SLUG }}"}')
          JWT_TOKEN=$(echo "$JWT_RESPONSE" | jq -r '.token')
          echo "::add-mask::$JWT_TOKEN"
          echo "::set-output name=jwt-token::$JWT_TOKEN"

      - name: Validate JWT Token
        run: |
          JWT_TOKEN=${{ steps.jwt-token.outputs.jwt-token }}
          echo "Validating JWT token..."
          if [ -z "$JWT_TOKEN" ]; then
            echo "JWT token is empty"
            exit 1
          fi
          echo "JWT token is valid"

      - name: Install Cloudsmith CLI
        run: |
          pip install cloudsmith-cli

      - name: Authenticate Cloudsmith CLI
        run: |
          CLOUDSMITH_API_KEY=${{ steps.jwt-token.outputs.jwt-token }}
          echo "Authenticating Cloudsmith CLI..."
          export CLOUDSMITH_API_KEY

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist
          repository: ${{ github.repository }}
          github-token: ${{ github.token }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: List directory contents
        run: ls -la dist/
        shell: bash

      - name: Tag the package with `ready-for-production`
        run: |
          if ! ls dist/*.tar.gz 1> /dev/null 2>&1; then
            echo "No package found to upload"
            exit 1
          fi
          PACKAGE_FILE=$(ls dist/*.tar.gz)
          PACKAGE_NAME=$(basename $PACKAGE_FILE)
          cloudsmith tag add ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_REPOSITORY }} $PACKAGE_NAME ready-for-production

      - name: Push package to Cloudsmith
        run: |
          if ! ls dist/*.tar.gz 1> /dev/null 2>&1; then
            echo "No package found to upload"
            exit 1
          fi
          PACKAGE_FILE=$(ls dist/*.tar.gz)
          cloudsmith push python ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_REPOSITORY }} $PACKAGE_FILE --republish
        shell: bash
