name: Promote Python Package

on:
  package_synchronized:

env:
  CLOUDSMITH_NAMESPACE: ${{ secrets.CLOUDSMITH_NAMESPACE }}
  CLOUDSMITH_STAGING_REPO: 'staging'
  CLOUDSMITH_PRODUCTION_REPO: 'production'
  CLOUDSMITH_SERVICE_SLUG: ${{ secrets.CLOUDSMITH_SERVICE_SLUG }}
  PACKAGE_NAME: 'example_package'
  CLOUDSMITH_ACCOUNT: 'your-cloudsmith-account'  # Replace with your Cloudsmith account

permissions:
  id-token: write
  contents: read

jobs:
  promote:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Request OIDC Token
        id: oidc-token
        run: |
          echo "Requesting OIDC token..."
          OIDC_TOKEN=$(curl -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" | jq -r '.value')
          echo "::add-mask::$OIDC_TOKEN"
          echo "::set-output name=oidc-token::$OIDC_TOKEN"

      - name: Request JWT Token from Cloudsmith
        id: jwt-token
        run: |
          echo "Requesting JWT token from Cloudsmith..."
          JWT_RESPONSE=$(curl -X POST "https://api.cloudsmith.io/openid/${{ env.CLOUDSMITH_ACCOUNT }}/" \
            -H "Content-Type: application/json" \
            -d '{"oidc_token": "${{ steps.oidc-token.outputs.oidc-token }}", "service_slug": "${{ env.CLOUDSMITH_SERVICE_SLUG }}"}')
          JWT_TOKEN=$(echo "$JWT_RESPONSE" | jq -r '.token')
          echo "::add-mask::$JWT_TOKEN"
          echo "::set-output name=jwt-token::$JWT_TOKEN"

      - name: Validate JWT Token
        run: |
          JWT_TOKEN=${{ steps.jwt-token.outputs.jwt-token }}
          echo "Validating JWT token..."
          if [ -z "$JWT_TOKEN" ]; then
            echo "JWT token is empty"
            exit 1
          fi
          echo "JWT token is valid"

      - name: Install Cloudsmith CLI
        run: |
          pip install cloudsmith-cli

      - name: Authenticate Cloudsmith CLI
        run: |
          CLOUDSMITH_API_KEY=${{ steps.jwt-token.outputs.jwt-token }}
          echo "Authenticating Cloudsmith CLI..."
          export CLOUDSMITH_API_KEY

      - name: Tag package with ready-for-production
        run: |
          PACKAGE_QUERY="tag:ready-for-production"
          echo "Searching for packages with query: $PACKAGE_QUERY"
          
          PACKAGE_DATA=$(cloudsmith list package ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }} -q "$PACKAGE_QUERY" -F json)
          
          IDENTIFIERS=$(echo "$PACKAGE_DATA" | jq -r '.data[].identifier_perm')
          
          if [ -z "$IDENTIFIERS" ]; then
            echo "No packages found with the ready-for-production tag"
            exit 1
          fi
          
          for IDENTIFIER in $IDENTIFIERS; do
            echo "Tagging package with identifier: $IDENTIFIER"
            cloudsmith tags add ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/$IDENTIFIER ready-for-production
          done

      - name: Promote package
        run: |
          for IDENTIFIER in $IDENTIFIERS; do
            echo "Promoting package with identifier: $IDENTIFIER"
            cloudsmith mv --yes \
              ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/$IDENTIFIER \
              ${{ env.CLOUDSMITH_PRODUCTION_REPO }}
          done
        shell: bash
